--Tablolar

CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    first_name character varying(50),
    last_name character varying(50),
     email character varying(100) UNIQUE NOT NULL,
     phone character varying(20),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );

CREATE TABLE address (
     address_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id)
        ON UPDATE NO ACTION
         ON DELETE CASCADE,
     address_type character varying(50),
     street character varying(100),
     city character varying(50),
     region character varying(50),
    postal_code character varying(20),
     country character varying(50),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );


 CREATE TABLE orders (
     order_id SERIAL PRIMARY KEY,
     customer_id INTEGER REFERENCES customers(customer_id)
         ON UPDATE NO ACTION
         ON DELETE CASCADE,
     order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     status character varying(50) DEFAULT 'Pending' 
 );

 CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
     product_name character varying(100),
     description TEXT,
     price NUMERIC(10, 2),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );

 CREATE TABLE order_items (
     order_item_id SERIAL PRIMARY KEY,
     order_id INTEGER REFERENCES orders(order_id)
         ON UPDATE NO ACTION
         ON DELETE CASCADE,
     product_id INTEGER REFERENCES products(product_id)
         ON UPDATE NO ACTION
         ON DELETE CASCADE,
     quantity INTEGER NOT NULL,
     unit_price NUMERIC(10, 2) NOT NULL  
 );

 CREATE TABLE suppliers (
     supplier_id SERIAL PRIMARY KEY,
     supplier_name character varying(100) NOT NULL,
     contact_name character varying(100),
     contact_email character varying(100),
     phone character varying(20),
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );

 CREATE TABLE categories (
     category_id SERIAL PRIMARY KEY,
     category_name character varying(100) NOT NULL,
     parent_id INTEGER REFERENCES categories(category_id)
         ON DELETE SET NULL
 );
 CREATE TABLE employees (
     employee_id SERIAL PRIMARY KEY,
     first_name character varying(50),
     last_name character varying(50),
     email character varying(100) UNIQUE NOT NULL,
     phone character varying(20),
     manager_id INTEGER REFERENCES employees(employee_id)
         ON DELETE SET NULL,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
 );

 ALTER TABLE products
 ADD COLUMN supplier_id INTEGER REFERENCES suppliers(supplier_id) ON DELETE SET NULL,
 ADD COLUMN category_id INTEGER REFERENCES categories(category_id) ON DELETE SET NULL;

 ALTER TABLE orders
 ADD COLUMN handled_by INTEGER REFERENCES employees(employee_id) ON DELETE SET NULL;

 CREATE TABLE review (
     review_id SERIAL PRIMARY KEY,
     customer_id INTEGER REFERENCES customers(customer_id) ON DELETE CASCADE,
     product_id INTEGER REFERENCES products(product_id) ON DELETE CASCADE,
     rating INTEGER CHECK (rating >= 1 AND rating <= 5),
     comment TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     UNIQUE (customer_id, product_id)  
 );

 CREATE TABLE review (
     review_id SERIAL PRIMARY KEY,
     customer_id INTEGER REFERENCES customers(customer_id) ON DELETE CASCADE,
     product_id INTEGER REFERENCES products(product_id) ON DELETE CASCADE,
     rating INTEGER CHECK (rating >= 1 AND rating <= 5),
     comment TEXT,
     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     UNIQUE (customer_id, product_id) 
 );


-- products.supplier_id → tedarikçi

-- products.category_id → kategori (hiyerarşik)

-- categories.parent_id → üst kategori

-- employees.manager_id → yönetici

-- orders.handled_by → siparişi işleyen çalışan


--İNSERT Komutları

 DO $$
 BEGIN
     IF NOT EXISTS (SELECT 1 FROM customers WHERE phone = '5656666666') THEN
         INSERT INTO customers (first_name, last_name, email, phone)
         VALUES ('berfin', 'berktaş', 'berktasberfin26@gmail.com', '5656666666');
     END IF;

     IF NOT EXISTS (SELECT 1 FROM customers WHERE phone = '5555555555') THEN
         INSERT INTO customers (first_name, last_name, email, phone)
         VALUES ('seval', 'berktaş', 'sevalb@gmail.com', '5555555555');
     END IF;


  IF NOT EXISTS (SELECT 1 FROM customers WHERE phone = '2222222222') THEN
         INSERT INTO customers (first_name, last_name, email, phone)
         VALUES ('ahmet', 'yılmaz', 'ahmetyılm@gmail.com', '2222222222');
     END IF;

     IF NOT EXISTS (SELECT 1 FROM customers WHERE phone = '3333333333') THEN
         INSERT INTO customers (first_name, last_name, email, phone)
         VALUES ('kübra', 'Kaya', 'kubkay@gmail.com', '3333333333');
     END IF;

     IF NOT EXISTS (SELECT 1 FROM customers WHERE phone = '7777777777') THEN
         INSERT INTO customers (first_name, last_name, email, phone)
         VALUES ('mehmet', 'koç', 'mehmetkoc@gmail.com', '7777777777');
     END IF;
 END $$;

 DO $$
 DECLARE
     customer1_id INTEGER;
     customer2_id INTEGER;
     customer3_id INTEGER;
     customer4_id INTEGER;
     customer5_id INTEGER;
 BEGIN
--     -- Müşteri ID'lerini alalım
     SELECT customer_id INTO customer1_id FROM customers WHERE phone = '5656666666';
     SELECT customer_id INTO customer2_id FROM customers WHERE phone = '5555555555';
     SELECT customer_id INTO customer3_id FROM customers WHERE phone = '5321112233';
     SELECT customer_id INTO customer4_id FROM customers WHERE phone = '5442223344';
     SELECT customer_id INTO customer5_id FROM customers WHERE phone = '5333334455';

--     -- Berfin'in adresleri
     IF NOT EXISTS (SELECT 1 FROM address WHERE customer_id = customer1_id AND address_type = 'Ev') THEN
         INSERT INTO address (customer_id, address_type, street, city, region, postal_code, country)
         VALUES (customer1_id, 'Ev', 'Atatürk Cad. No:15', 'malatya', 'doğu and.', '44044', 'Türkiye');
     END IF;

     IF NOT EXISTS (SELECT 1 FROM address WHERE customer_id = customer1_id AND address_type = 'İş') THEN
         INSERT INTO address (customer_id, address_type, street, city, region, postal_code, country)
         VALUES (customer1_id, 'İş', 'battalgazi no:10', 'malatya', 'doğu and.', '440404', 'Türkiye');
     END IF;

--     -- seval'in adresi
     IF NOT EXISTS (SELECT 1 FROM address WHERE customer_id = customer2_id AND address_type = 'iş') THEN
         INSERT INTO address (customer_id, address_type, street, city, region, postal_code, country)
         VALUES (customer2_id, 'iş', 'Barış Sok. No:22', 'Ankara', 'İç Anadolu', '06000', 'Türkiye');
     END IF;

--     -- ahmet'in adresi
     IF NOT EXISTS (SELECT 1 FROM address WHERE customer_id = customer3_id AND address_type = 'Ev') THEN
         INSERT INTO address (customer_id, address_type, street, city, region, postal_code, country)
         VALUES (customer3_id, 'Ev', 'Çamlık Mah. 5. Cadde No:10', 'İzmir', 'Ege', '35000', 'Türkiye');
     END IF;


--     -- kübra'nın adresi
     IF NOT EXISTS (SELECT 1 FROM address WHERE customer_id = customer4_id AND address_type = 'iş') THEN
         INSERT INTO address (customer_id, address_type, street, city, region, postal_code, country)
         VALUES (customer4_id, 'iş', 'Gül Sok. No:18', 'Bursa', 'Marmara', '16000', 'Türkiye');
     END IF;

--     -- mehmet'in adresi
     IF NOT EXISTS (SELECT 1 FROM address WHERE customer_id = customer5_id AND address_type = 'Ev') THEN
         INSERT INTO address (customer_id, address_type, street, city, region, postal_code, country)
         VALUES (customer5_id, 'Ev', 'Zafer Cad. No:3', 'Antalya', 'Akdeniz', '07000', 'Türkiye');
     END IF;
 END $$;

  DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM suppliers WHERE supplier_name = 'Supplies') THEN
        INSERT INTO suppliers (supplier_name, contact_name, contact_email, phone)
        VALUES ('Supplies', 'Ali Vural', 'ali.vural@supplies.com', '2123456789');
    END IF;

    IF NOT EXISTS (SELECT 1 FROM suppliers WHERE supplier_name = 'Office') THEN
        INSERT INTO suppliers (supplier_name, contact_name, contact_email, phone)
        VALUES ('Office', 'Selin Kaya', 'selin.kaya@office.com', '2129876543');
    END IF;
END $$;

DO $$
DECLARE
    elektronik_id INTEGER;
BEGIN
    -- Ana kategori ekle
    IF NOT EXISTS (SELECT 1 FROM categories WHERE cetegory_name = 'Elektronik') THEN
        INSERT INTO categories (cetegory_name, parent_id) VALUES ('Elektronik', NULL);
    END IF;

    -- Elektronik kategorisinin ID'sini al
    SELECT category_id INTO elektronik_id FROM categories WHERE cetegory_name = 'Elektronik';

    -- Bilgisayar alt kategorisi ekle
    IF NOT EXISTS (SELECT 1 FROM categories WHERE cetegory_name = 'Bilgisayar') THEN
        INSERT INTO categories (cetegory_name, parent_id) VALUES ('Bilgisayar', elektronik_id);
    END IF;

    -- Aksesuar alt kategorisi ekle
    IF NOT EXISTS (SELECT 1 FROM categories WHERE cetegory_name = 'Aksesuar') THEN
        INSERT INTO categories (cetegory_name, parent_id) VALUES ('Aksesuar', elektronik_id);
    END IF;
END;
$$;


DO $$
DECLARE
    manager_id_val INTEGER;
BEGIN
    -- Yönetici (manager olmayan)
    IF NOT EXISTS (SELECT 1 FROM employees WHERE email = 'murat.dogan@company.com') THEN
        INSERT INTO employees (first_name, last_name, email, phone, manager_id)
        VALUES ('Murat', 'Doğan', 'murat.dogan@company.com', '5051112233', NULL);
    END IF;

    -- Manager_id değerini çekiyoruz
    SELECT employee_id INTO manager_id_val FROM employees WHERE email = 'murat.dogan@company.com';

    -- Diğer çalışanlar, manager_id olarak Murat Doğan atanacak
    IF NOT EXISTS (SELECT 1 FROM employees WHERE email = 'selin.kaya@company.com') THEN
        INSERT INTO employees (first_name, last_name, email, phone, manager_id)
        VALUES ('Selin', 'Kaya', 'selin.kaya@company.com', '5052223344', manager_id_val);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM employees WHERE email = 'ahmet.yilmaz@company.com') THEN
        INSERT INTO employees (first_name, last_name, email, phone, manager_id)
        VALUES ('Ahmet', 'Yılmaz', 'ahmet.yilmaz@company.com', '5053334455', manager_id_val);
    END IF;
END $$;


DO $$
DECLARE
    supplier_id_val INTEGER;
    category_id_bilgisayar INTEGER;
    category_id_aksesuar INTEGER;
BEGIN
    SELECT supplier_id INTO supplier_id_val FROM suppliers WHERE supplier_name = 'Supplies ';

    SELECT category_id INTO category_id_bilgisayar FROM categories WHERE cetegory_name = 'Bilgisayar';
    SELECT category_id INTO category_id_aksesuar FROM categories WHERE cetegory_name = 'Aksesuar';

    IF NOT EXISTS (SELECT 1 FROM products WHERE product_name = 'Laptop Model X') THEN
        INSERT INTO products (product_name, description, price, supplier_id, category_id)
        VALUES ('Laptop Model X', 'Yüksek performanslı laptop', 7500.00, supplier_id_val, category_id_bilgisayar);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM products WHERE product_name = 'Wireless Mouse') THEN
        INSERT INTO products (product_name, description, price, supplier_id, category_id)
        VALUES ('Wireless Mouse', 'Kablosuz mouse', 150.00, supplier_id_val, category_id_aksesuar);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM products WHERE product_name = 'Mechanical Keyboard') THEN
        INSERT INTO products (product_name, description, price, supplier_id, category_id)
        VALUES ('Mechanical Keyboard', 'Mekanik klavye', 350.00, supplier_id_val, category_id_aksesuar);
    END IF;
END;
$$;



DO $$
DECLARE
    employee_id_val INTEGER;
    customer1_id INTEGER;
    customer2_id INTEGER;
    product_laptop_id INTEGER;
    product_mouse_id INTEGER;
    product_keyboard_id INTEGER;
BEGIN
    SELECT employee_id INTO employee_id_val FROM employees WHERE email = 'selin.kaya@company.com';
    SELECT customer_id INTO customer1_id FROM customers WHERE phone = '5656666666';
    SELECT customer_id INTO customer2_id FROM customers WHERE phone = '5555555555';

    SELECT product_id INTO product_laptop_id FROM products WHERE product_name = 'Laptop Model X';
    SELECT product_id INTO product_mouse_id FROM products WHERE product_name = 'Wireless Mouse';
    SELECT product_id INTO product_keyboard_id FROM products WHERE product_name = 'Mechanical Keyboard';

    -- 1. Sipariş - berfin için
    IF NOT EXISTS (SELECT 1 FROM orders WHERE customer_id = customer1_id) THEN
        INSERT INTO orders (customer_id, order_date, status, handled_by)
        VALUES (customer1_id, NOW(), 'Pending', employee_id_val);
    END IF;

    -- 2. Sipariş - ayşe için
    IF NOT EXISTS (SELECT 1 FROM orders WHERE customer_id = customer2_id) THEN
        INSERT INTO orders (customer_id, order_date, status, handled_by)
        VALUES (customer2_id, NOW(), 'Pending', employee_id_val);
    END IF;

    -- order_id'leri çekiyoruz
    -- varsayalım siparişler az önce eklendi, ilk sipariş customer1_id, ikinci sipariş customer2_id

    -- order_items için sipariş ID'lerini seçiyoruz
    DECLARE
        order1_id INTEGER;
        order2_id INTEGER;
    BEGIN
        SELECT order_id INTO order1_id FROM orders WHERE customer_id = customer1_id ORDER BY order_date DESC LIMIT 1;
        SELECT order_id INTO order2_id FROM orders WHERE customer_id = customer2_id ORDER BY order_date DESC LIMIT 1;

        -- order_items ekleme
        IF NOT EXISTS (SELECT 1 FROM order_items WHERE order_id = order1_id AND product_id = product_laptop_id) THEN
            INSERT INTO order_items (order_id, product_id, quantity, unit_price)
            VALUES (order1_id, product_laptop_id, 1, 7500.00);
        END IF;

        IF NOT EXISTS (SELECT 1 FROM order_items WHERE order_id = order1_id AND product_id = product_mouse_id) THEN
            INSERT INTO order_items (order_id, product_id, quantity, unit_price)
            VALUES (order1_id, product_mouse_id, 2, 150.00);
        END IF;

        IF NOT EXISTS (SELECT 1 FROM order_items WHERE order_id = order2_id AND product_id = product_keyboard_id) THEN
            INSERT INTO order_items (order_id, product_id, quantity, unit_price)
            VALUES (order2_id, product_keyboard_id, 1, 350.00);
        END IF;
    END;
END $$;


DO $$
DECLARE
    customer1_id INTEGER;
    customer2_id INTEGER;
    product_laptop_id INTEGER;
    product_mouse_id INTEGER;
    product_keyboard_id INTEGER;
BEGIN
    -- ID'leri çekiyoruz
    SELECT customer_id INTO customer1_id FROM customers WHERE phone = '5656666666'; -- Berfin
    SELECT customer_id INTO customer2_id FROM customers WHERE phone = '5555555555'; -- Ayşe

    SELECT product_id INTO product_laptop_id FROM products WHERE product_name = 'Laptop Model X';
    SELECT product_id INTO product_mouse_id FROM products WHERE product_name = 'Wireless Mouse';
    SELECT product_id INTO product_keyboard_id FROM products WHERE product_name = 'Mechanical Keyboard';

    -- Berfin Laptop'a yorum yapsın
    IF NOT EXISTS (
        SELECT 1 FROM review WHERE customer_id = customer1_id AND product_id = product_laptop_id
    ) THEN
        INSERT INTO review (customer_id, product_id, rating, comment)
        VALUES (customer1_id, product_laptop_id, 5, 'Çok memnun kaldım, performansı harika!');
    END IF;

    -- Ayşe Mouse'a yorum yapsın
    IF NOT EXISTS (
        SELECT 1 FROM review WHERE customer_id = customer2_id AND product_id = product_mouse_id
    ) THEN
        INSERT INTO review (customer_id, product_id, rating, comment)
        VALUES (customer2_id, product_mouse_id, 4, 'Kullanımı rahat ve tepki süresi iyi.');
    END IF;

    -- Ayşe Klavyeye yorum yapsın
    IF NOT EXISTS (
        SELECT 1 FROM review WHERE customer_id = customer2_id AND product_id = product_keyboard_id
    ) THEN
        INSERT INTO review (customer_id, product_id, rating, comment)
        VALUES (customer2_id, product_keyboard_id, 5, 'Yazarken çok keyifli, tuş hissiyatı güzel.');
    END IF;
END $$;

--SORGULAR
SELECT * FROM customers inner join orders ON customers.customer_id=orders.customer_id
WHERE customers.customer_id=1 
--Bu sorgu, customer_id’si 1 olan müşterinin yaptığı tüm siparişleri ve müşteri bilgilerini birlikte getirir.

SELECT c.category_id ,products.product_name, review.comment, first_name,last_name FROM customers inner join review ON customers.customer_id=review.customer_id
inner join products ON products.product_id=review.product_id
inner join categories  as c ON c.category_id=products.category_id
WHERE c.category_id=3
--Bu sorgu, category_id’si 3 olan kategorideki ürünlere yapılan yorumları ve yorum yapan müşterinin ad-soyad bilgilerini listeler.

SELECT address.city FROM order_items inner join orders ON order_items.order_id=orders.order_id
inner join customers ON  customers.customer_id=orders.customer_id
inner join address ON address.customer_id=customers.customer_id
WHERE order_items.unit_price<500
--Bu sorgu, birim fiyatı 500’den düşük olan siparişlerin ait olduğu müşterilerin şehir bilgilerini getirir.

